# ============================================================
# ü§ñ AI SUMMARY + SMART INSIGHTS (Streamlit-Compatible, Modern UI)
# ============================================================

import streamlit as st
import numpy as np

def generate_ai_summary(client, df, sector="General / Unspecified"):
    """
    Generate AI-powered dataset description and insights using Groq API.
    Produces a brief narrative summary instead of a technical column list.
    """

    if df is None or df.empty:
        st.warning("‚ö†Ô∏è No dataset provided for AI summary.")
        return "No data available", []

    # --- Header Section ---
    st.markdown("<h2 style='color:#2563EB;'>ü§ñ AI Dataset Summary & Insights</h2>", unsafe_allow_html=True)
    st.caption("A concise, natural-language overview and smart insights generated by AI.")

    with st.spinner("ü§ñ Generating dataset summary..."):
        # --- Prepare dataset info ---
        df_summary = df.copy()
        rows, cols = df_summary.shape

        drop_cols = {"cluster", "segment", "target"}
        df_summary = df_summary[[c for c in df_summary.columns if c.lower() not in drop_cols]]

        skip_cols = {"id", "index", "cluster", "segment", "target"}
        cat_cols = [
            c for c in df_summary.columns
            if (df_summary[c].dtype.name == "category" or df_summary[c].nunique() < 20)
            and c.lower() not in skip_cols
        ]
        num_cols = [
            c for c in df_summary.columns
            if (df_summary[c].dtype in ["int64", "float64"])
            and c.lower() not in skip_cols
            and c not in cat_cols
        ]

        # --- Prepare context for AI ---
        column_context = ", ".join(df_summary.columns[:15]) + ("..." if len(df_summary.columns) > 15 else "")
        data_context = f"""
        - Rows: {rows:,}
        - Columns: {cols}
        - Sector: {sector}
        - Example columns: {column_context}
        """

        # --- Ask AI for a short human-style summary ---
        try:
            summary_prompt = f"""
            You are a data analyst. Write a brief, natural-language paragraph (3‚Äì4 sentences)
            that describes the dataset below. Mention what type of data it appears to contain,
            its likely purpose, and potential use ‚Äî *based on the context provided*.
            Avoid listing columns or technical terms like "categorical" or "numerical".

            Dataset Info:
            {data_context}
            """

            response = client.chat.completions.create(
                model="llama-3.1-8b-instant",
                messages=[
                    {"role": "system", "content": "You write short, professional dataset summaries in plain English."},
                    {"role": "user", "content": summary_prompt},
                ],
                temperature=0.4,
                max_tokens=250,
            )

            ai_summary_text = response.choices[0].message.content.strip()

        except Exception as e:
            ai_summary_text = (
                f"This dataset contains **{rows:,} records** and **{cols} columns**, "
                f"likely representing data related to the **{sector}** domain."
            )
            st.warning(f"‚ö†Ô∏è AI summary generation failed ({e}). Using fallback.")

        # --- Display Summary ---
        st.markdown(
            f"""
            <div style="padding:15px; border-radius:8px; background-color:#F3F4F6; border-left:4px solid #2563EB; margin-top:10px;">
                <p style="margin:0; color:#1E3A8A;"><strong>üß† AI Dataset Summary</strong></p>
                <p style="margin-top:8px;">{ai_summary_text}</p>
            </div>
            """,
            unsafe_allow_html=True,
        )

    # --- Generate AI insights ---
    st.markdown("<h4 style='margin-top:25px; color:#2563EB;'>üîç Key AI Insights</h4>", unsafe_allow_html=True)

    try:
        insight_prompt = f"""
        You are a professional data analyst. Based on the dataset summary below,
        provide 4 concise insights or analytical ideas (no code). Avoid generic phrasing.

        Dataset Sector: {sector}
        Dataset Summary:
        {ai_summary_text}
        """

        with st.spinner("‚ú® Deriving smart insights..."):
            response = client.chat.completions.create(
                model="llama-3.1-8b-instant",
                messages=[
                    {
                        "role": "system",
                        "content": "You generate focused analytical insights that follow from dataset summaries."
                    },
                    {"role": "user", "content": insight_prompt},
                ],
                temperature=0.4,
                max_tokens=300,
            )

            ai_text = response.choices[0].message.content.strip()
            insights = [line.strip("‚Ä¢- ").strip() for line in ai_text.split("\n") if line.strip()]

    except Exception as e:
        st.warning(f"‚ö†Ô∏è AI insight generation failed ({e}). Using defaults.")
        insights = [
            "Explore key trends, averages, and distributions.",
            "Investigate feature relationships and correlations.",
            "Identify segments, anomalies, or emerging patterns.",
            "Analyze time-based or category-based variations."
        ]

    # --- Display Insights in a clean format ---
    st.markdown("<ul style='list-style-type:none; padding-left:10px;'>", unsafe_allow_html=True)
    for i, insight in enumerate(insights, 1):
        st.markdown(
            f"""
            <li style="margin-bottom:8px;">
                <span style="color:#2563EB; font-weight:bold;">{i}.</span>
                <span>{insight}</span>
            </li>
            """,
            unsafe_allow_html=True,
        )
    st.markdown("</ul>", unsafe_allow_html=True)

    # --- Footer ---
    st.markdown(
        """
        <div style="margin-top:20px; padding:10px; background-color:#F9FAFB; border-radius:8px; border-left:4px solid #2563EB;">
            ‚úÖ <strong>AI Summary and Insights generated successfully.</strong>
        </div>
        """,
        unsafe_allow_html=True,
    )

    return ai_summary_text, insights
